/**
 *
 *  TScheduleCfg.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TScheduleCfg.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::workflow;

const std::string TScheduleCfg::Cols::_task_type = "task_type";
const std::string TScheduleCfg::Cols::_schedule_limit = "schedule_limit";
const std::string TScheduleCfg::Cols::_schedule_interval = "schedule_interval";
const std::string TScheduleCfg::Cols::_max_processing_time = "max_processing_time";
const std::string TScheduleCfg::Cols::_max_retry_num = "max_retry_num";
const std::string TScheduleCfg::Cols::_retry_interval = "retry_interval";
const std::string TScheduleCfg::Cols::_create_time = "create_time";
const std::string TScheduleCfg::Cols::_modify_time = "modify_time";
const std::string TScheduleCfg::primaryKeyName = "task_type";
const bool TScheduleCfg::hasPrimaryKey = true;
const std::string TScheduleCfg::tableName = "t_schedule_cfg";

const std::vector<typename TScheduleCfg::MetaData> TScheduleCfg::metaData_={
{"task_type","std::string","varchar(128)",128,0,1,1},
{"schedule_limit","int32_t","int",4,0,0,0},
{"schedule_interval","int32_t","int",4,0,0,1},
{"max_processing_time","int32_t","int",4,0,0,0},
{"max_retry_num","int32_t","int",4,0,0,0},
{"retry_interval","int32_t","int",4,0,0,0},
{"create_time","::trantor::Date","datetime",0,0,0,0},
{"modify_time","::trantor::Date","datetime",0,0,0,0}
};
const std::string &TScheduleCfg::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TScheduleCfg::TScheduleCfg(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(r["task_type"].as<std::string>());
        }
        if(!r["schedule_limit"].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>(r["schedule_limit"].as<int32_t>());
        }
        if(!r["schedule_interval"].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>(r["schedule_interval"].as<int32_t>());
        }
        if(!r["max_processing_time"].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>(r["max_processing_time"].as<int32_t>());
        }
        if(!r["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>(r["max_retry_num"].as<int32_t>());
        }
        if(!r["retry_interval"].isNull())
        {
            retryInterval_=std::make_shared<int32_t>(r["retry_interval"].as<int32_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["modify_time"].isNull())
        {
            auto timeStr = r["modify_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            taskType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            retryInterval_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

TScheduleCfg::TScheduleCfg(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            retryInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

TScheduleCfg::TScheduleCfg(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("task_type"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson["task_type"].asString());
        }
    }
    if(pJson.isMember("schedule_limit"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["schedule_limit"].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>((int32_t)pJson["schedule_limit"].asInt64());
        }
    }
    if(pJson.isMember("schedule_interval"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["schedule_interval"].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>((int32_t)pJson["schedule_interval"].asInt64());
        }
    }
    if(pJson.isMember("max_processing_time"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["max_processing_time"].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>((int32_t)pJson["max_processing_time"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_num"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson["max_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("retry_interval"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["retry_interval"].isNull())
        {
            retryInterval_=std::make_shared<int32_t>((int32_t)pJson["retry_interval"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("modify_time"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["modify_time"].isNull())
        {
            auto timeStr = pJson["modify_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TScheduleCfg::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            retryInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TScheduleCfg::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("task_type"))
    {
        if(!pJson["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson["task_type"].asString());
        }
    }
    if(pJson.isMember("schedule_limit"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["schedule_limit"].isNull())
        {
            scheduleLimit_=std::make_shared<int32_t>((int32_t)pJson["schedule_limit"].asInt64());
        }
    }
    if(pJson.isMember("schedule_interval"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["schedule_interval"].isNull())
        {
            scheduleInterval_=std::make_shared<int32_t>((int32_t)pJson["schedule_interval"].asInt64());
        }
    }
    if(pJson.isMember("max_processing_time"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["max_processing_time"].isNull())
        {
            maxProcessingTime_=std::make_shared<int32_t>((int32_t)pJson["max_processing_time"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_num"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson["max_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("retry_interval"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["retry_interval"].isNull())
        {
            retryInterval_=std::make_shared<int32_t>((int32_t)pJson["retry_interval"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("modify_time"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["modify_time"].isNull())
        {
            auto timeStr = pJson["modify_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const std::string &TScheduleCfg::getValueOfTaskType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(taskType_)
        return *taskType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TScheduleCfg::getTaskType() const noexcept
{
    return taskType_;
}
void TScheduleCfg::setTaskType(const std::string &pTaskType) noexcept
{
    taskType_ = std::make_shared<std::string>(pTaskType);
    dirtyFlag_[0] = true;
}
void TScheduleCfg::setTaskType(std::string &&pTaskType) noexcept
{
    taskType_ = std::make_shared<std::string>(std::move(pTaskType));
    dirtyFlag_[0] = true;
}
const typename TScheduleCfg::PrimaryKeyType & TScheduleCfg::getPrimaryKey() const
{
    assert(taskType_);
    return *taskType_;
}

const int32_t &TScheduleCfg::getValueOfScheduleLimit() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(scheduleLimit_)
        return *scheduleLimit_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TScheduleCfg::getScheduleLimit() const noexcept
{
    return scheduleLimit_;
}
void TScheduleCfg::setScheduleLimit(const int32_t &pScheduleLimit) noexcept
{
    scheduleLimit_ = std::make_shared<int32_t>(pScheduleLimit);
    dirtyFlag_[1] = true;
}
void TScheduleCfg::setScheduleLimitToNull() noexcept
{
    scheduleLimit_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &TScheduleCfg::getValueOfScheduleInterval() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(scheduleInterval_)
        return *scheduleInterval_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TScheduleCfg::getScheduleInterval() const noexcept
{
    return scheduleInterval_;
}
void TScheduleCfg::setScheduleInterval(const int32_t &pScheduleInterval) noexcept
{
    scheduleInterval_ = std::make_shared<int32_t>(pScheduleInterval);
    dirtyFlag_[2] = true;
}

const int32_t &TScheduleCfg::getValueOfMaxProcessingTime() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(maxProcessingTime_)
        return *maxProcessingTime_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TScheduleCfg::getMaxProcessingTime() const noexcept
{
    return maxProcessingTime_;
}
void TScheduleCfg::setMaxProcessingTime(const int32_t &pMaxProcessingTime) noexcept
{
    maxProcessingTime_ = std::make_shared<int32_t>(pMaxProcessingTime);
    dirtyFlag_[3] = true;
}
void TScheduleCfg::setMaxProcessingTimeToNull() noexcept
{
    maxProcessingTime_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &TScheduleCfg::getValueOfMaxRetryNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(maxRetryNum_)
        return *maxRetryNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TScheduleCfg::getMaxRetryNum() const noexcept
{
    return maxRetryNum_;
}
void TScheduleCfg::setMaxRetryNum(const int32_t &pMaxRetryNum) noexcept
{
    maxRetryNum_ = std::make_shared<int32_t>(pMaxRetryNum);
    dirtyFlag_[4] = true;
}
void TScheduleCfg::setMaxRetryNumToNull() noexcept
{
    maxRetryNum_.reset();
    dirtyFlag_[4] = true;
}

const int32_t &TScheduleCfg::getValueOfRetryInterval() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(retryInterval_)
        return *retryInterval_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TScheduleCfg::getRetryInterval() const noexcept
{
    return retryInterval_;
}
void TScheduleCfg::setRetryInterval(const int32_t &pRetryInterval) noexcept
{
    retryInterval_ = std::make_shared<int32_t>(pRetryInterval);
    dirtyFlag_[5] = true;
}
void TScheduleCfg::setRetryIntervalToNull() noexcept
{
    retryInterval_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &TScheduleCfg::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TScheduleCfg::getCreateTime() const noexcept
{
    return createTime_;
}
void TScheduleCfg::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[6] = true;
}
void TScheduleCfg::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &TScheduleCfg::getValueOfModifyTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(modifyTime_)
        return *modifyTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TScheduleCfg::getModifyTime() const noexcept
{
    return modifyTime_;
}
void TScheduleCfg::setModifyTime(const ::trantor::Date &pModifyTime) noexcept
{
    modifyTime_ = std::make_shared<::trantor::Date>(pModifyTime);
    dirtyFlag_[7] = true;
}
void TScheduleCfg::setModifyTimeToNull() noexcept
{
    modifyTime_.reset();
    dirtyFlag_[7] = true;
}

void TScheduleCfg::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TScheduleCfg::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "task_type",
        "schedule_limit",
        "schedule_interval",
        "max_processing_time",
        "max_retry_num",
        "retry_interval",
        "create_time",
        "modify_time"
    };
    return inCols;
}

void TScheduleCfg::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTaskType())
        {
            binder << getValueOfTaskType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getScheduleLimit())
        {
            binder << getValueOfScheduleLimit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getScheduleInterval())
        {
            binder << getValueOfScheduleInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMaxProcessingTime())
        {
            binder << getValueOfMaxProcessingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMaxRetryNum())
        {
            binder << getValueOfMaxRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRetryInterval())
        {
            binder << getValueOfRetryInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getModifyTime())
        {
            binder << getValueOfModifyTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TScheduleCfg::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void TScheduleCfg::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTaskType())
        {
            binder << getValueOfTaskType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getScheduleLimit())
        {
            binder << getValueOfScheduleLimit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getScheduleInterval())
        {
            binder << getValueOfScheduleInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMaxProcessingTime())
        {
            binder << getValueOfMaxProcessingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getMaxRetryNum())
        {
            binder << getValueOfMaxRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRetryInterval())
        {
            binder << getValueOfRetryInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getModifyTime())
        {
            binder << getValueOfModifyTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TScheduleCfg::toJson() const
{
    Json::Value ret;
    if(getTaskType())
    {
        ret["task_type"]=getValueOfTaskType();
    }
    else
    {
        ret["task_type"]=Json::Value();
    }
    if(getScheduleLimit())
    {
        ret["schedule_limit"]=getValueOfScheduleLimit();
    }
    else
    {
        ret["schedule_limit"]=Json::Value();
    }
    if(getScheduleInterval())
    {
        ret["schedule_interval"]=getValueOfScheduleInterval();
    }
    else
    {
        ret["schedule_interval"]=Json::Value();
    }
    if(getMaxProcessingTime())
    {
        ret["max_processing_time"]=getValueOfMaxProcessingTime();
    }
    else
    {
        ret["max_processing_time"]=Json::Value();
    }
    if(getMaxRetryNum())
    {
        ret["max_retry_num"]=getValueOfMaxRetryNum();
    }
    else
    {
        ret["max_retry_num"]=Json::Value();
    }
    if(getRetryInterval())
    {
        ret["retry_interval"]=getValueOfRetryInterval();
    }
    else
    {
        ret["retry_interval"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getModifyTime())
    {
        ret["modify_time"]=getModifyTime()->toDbStringLocal();
    }
    else
    {
        ret["modify_time"]=Json::Value();
    }
    return ret;
}

Json::Value TScheduleCfg::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTaskType())
            {
                ret[pMasqueradingVector[0]]=getValueOfTaskType();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getScheduleLimit())
            {
                ret[pMasqueradingVector[1]]=getValueOfScheduleLimit();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getScheduleInterval())
            {
                ret[pMasqueradingVector[2]]=getValueOfScheduleInterval();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMaxProcessingTime())
            {
                ret[pMasqueradingVector[3]]=getValueOfMaxProcessingTime();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMaxRetryNum())
            {
                ret[pMasqueradingVector[4]]=getValueOfMaxRetryNum();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRetryInterval())
            {
                ret[pMasqueradingVector[5]]=getValueOfRetryInterval();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[6]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getModifyTime())
            {
                ret[pMasqueradingVector[7]]=getModifyTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTaskType())
    {
        ret["task_type"]=getValueOfTaskType();
    }
    else
    {
        ret["task_type"]=Json::Value();
    }
    if(getScheduleLimit())
    {
        ret["schedule_limit"]=getValueOfScheduleLimit();
    }
    else
    {
        ret["schedule_limit"]=Json::Value();
    }
    if(getScheduleInterval())
    {
        ret["schedule_interval"]=getValueOfScheduleInterval();
    }
    else
    {
        ret["schedule_interval"]=Json::Value();
    }
    if(getMaxProcessingTime())
    {
        ret["max_processing_time"]=getValueOfMaxProcessingTime();
    }
    else
    {
        ret["max_processing_time"]=Json::Value();
    }
    if(getMaxRetryNum())
    {
        ret["max_retry_num"]=getValueOfMaxRetryNum();
    }
    else
    {
        ret["max_retry_num"]=Json::Value();
    }
    if(getRetryInterval())
    {
        ret["retry_interval"]=getValueOfRetryInterval();
    }
    else
    {
        ret["retry_interval"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getModifyTime())
    {
        ret["modify_time"]=getModifyTime()->toDbStringLocal();
    }
    else
    {
        ret["modify_time"]=Json::Value();
    }
    return ret;
}

bool TScheduleCfg::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("task_type"))
    {
        if(!validJsonOfField(0, "task_type", pJson["task_type"], err, true))
            return false;
    }
    else
    {
        err="The task_type column cannot be null";
        return false;
    }
    if(pJson.isMember("schedule_limit"))
    {
        if(!validJsonOfField(1, "schedule_limit", pJson["schedule_limit"], err, true))
            return false;
    }
    if(pJson.isMember("schedule_interval"))
    {
        if(!validJsonOfField(2, "schedule_interval", pJson["schedule_interval"], err, true))
            return false;
    }
    if(pJson.isMember("max_processing_time"))
    {
        if(!validJsonOfField(3, "max_processing_time", pJson["max_processing_time"], err, true))
            return false;
    }
    if(pJson.isMember("max_retry_num"))
    {
        if(!validJsonOfField(4, "max_retry_num", pJson["max_retry_num"], err, true))
            return false;
    }
    if(pJson.isMember("retry_interval"))
    {
        if(!validJsonOfField(5, "retry_interval", pJson["retry_interval"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(6, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("modify_time"))
    {
        if(!validJsonOfField(7, "modify_time", pJson["modify_time"], err, true))
            return false;
    }
    return true;
}
bool TScheduleCfg::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TScheduleCfg::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("task_type"))
    {
        if(!validJsonOfField(0, "task_type", pJson["task_type"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("schedule_limit"))
    {
        if(!validJsonOfField(1, "schedule_limit", pJson["schedule_limit"], err, false))
            return false;
    }
    if(pJson.isMember("schedule_interval"))
    {
        if(!validJsonOfField(2, "schedule_interval", pJson["schedule_interval"], err, false))
            return false;
    }
    if(pJson.isMember("max_processing_time"))
    {
        if(!validJsonOfField(3, "max_processing_time", pJson["max_processing_time"], err, false))
            return false;
    }
    if(pJson.isMember("max_retry_num"))
    {
        if(!validJsonOfField(4, "max_retry_num", pJson["max_retry_num"], err, false))
            return false;
    }
    if(pJson.isMember("retry_interval"))
    {
        if(!validJsonOfField(5, "retry_interval", pJson["retry_interval"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(6, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("modify_time"))
    {
        if(!validJsonOfField(7, "modify_time", pJson["modify_time"], err, false))
            return false;
    }
    return true;
}
bool TScheduleCfg::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TScheduleCfg::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
