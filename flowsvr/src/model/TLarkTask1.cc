/**
 *
 *  TLarkTask1.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TLarkTask1.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::workflow;

const std::string TLarkTask1::Cols::_id = "id";
const std::string TLarkTask1::Cols::_user_id = "user_id";
const std::string TLarkTask1::Cols::_task_id = "task_id";
const std::string TLarkTask1::Cols::_task_type = "task_type";
const std::string TLarkTask1::Cols::_task_stage = "task_stage";
const std::string TLarkTask1::Cols::_status = "status";
const std::string TLarkTask1::Cols::_priority = "priority";
const std::string TLarkTask1::Cols::_crt_retry_num = "crt_retry_num";
const std::string TLarkTask1::Cols::_max_retry_num = "max_retry_num";
const std::string TLarkTask1::Cols::_max_retry_interval = "max_retry_interval";
const std::string TLarkTask1::Cols::_schedule_log = "schedule_log";
const std::string TLarkTask1::Cols::_task_context = "task_context";
const std::string TLarkTask1::Cols::_order_time = "order_time";
const std::string TLarkTask1::Cols::_create_time = "create_time";
const std::string TLarkTask1::Cols::_modify_time = "modify_time";
const std::string TLarkTask1::primaryKeyName = "id";
const bool TLarkTask1::hasPrimaryKey = true;
const std::string TLarkTask1::tableName = "t_lark_task_1";

const std::vector<typename TLarkTask1::MetaData> TLarkTask1::metaData_={
{"id","int32_t","int",4,1,1,1},
{"user_id","std::string","varchar(256)",256,0,0,1},
{"task_id","std::string","varchar(256)",256,0,0,1},
{"task_type","std::string","varchar(128)",128,0,0,1},
{"task_stage","std::string","varchar(128)",128,0,0,1},
{"status","uint8_t","tinyint unsigned",1,0,0,1},
{"priority","int32_t","int",4,0,0,1},
{"crt_retry_num","int32_t","int",4,0,0,1},
{"max_retry_num","int32_t","int",4,0,0,1},
{"max_retry_interval","int32_t","int",4,0,0,1},
{"schedule_log","std::string","varchar(4096)",4096,0,0,1},
{"task_context","std::string","varchar(8192)",8192,0,0,1},
{"order_time","int32_t","int",4,0,0,1},
{"create_time","::trantor::Date","datetime",0,0,0,1},
{"modify_time","::trantor::Date","datetime",0,0,0,1}
};
const std::string &TLarkTask1::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TLarkTask1::TLarkTask1(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(r["user_id"].as<std::string>());
        }
        if(!r["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(r["task_id"].as<std::string>());
        }
        if(!r["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(r["task_type"].as<std::string>());
        }
        if(!r["task_stage"].isNull())
        {
            taskStage_=std::make_shared<std::string>(r["task_stage"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<uint8_t>(r["status"].as<uint8_t>());
        }
        if(!r["priority"].isNull())
        {
            priority_=std::make_shared<int32_t>(r["priority"].as<int32_t>());
        }
        if(!r["crt_retry_num"].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>(r["crt_retry_num"].as<int32_t>());
        }
        if(!r["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>(r["max_retry_num"].as<int32_t>());
        }
        if(!r["max_retry_interval"].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>(r["max_retry_interval"].as<int32_t>());
        }
        if(!r["schedule_log"].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(r["schedule_log"].as<std::string>());
        }
        if(!r["task_context"].isNull())
        {
            taskContext_=std::make_shared<std::string>(r["task_context"].as<std::string>());
        }
        if(!r["order_time"].isNull())
        {
            orderTime_=std::make_shared<int32_t>(r["order_time"].as<int32_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["modify_time"].isNull())
        {
            auto timeStr = r["modify_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            taskId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            taskType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            taskStage_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            status_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            priority_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            taskContext_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            orderTime_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

TLarkTask1::TLarkTask1(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            taskStage_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            priority_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            taskContext_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            orderTime_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

TLarkTask1::TLarkTask1(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
    if(pJson.isMember("task_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson["task_id"].asString());
        }
    }
    if(pJson.isMember("task_type"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson["task_type"].asString());
        }
    }
    if(pJson.isMember("task_stage"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["task_stage"].isNull())
        {
            taskStage_=std::make_shared<std::string>(pJson["task_stage"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("priority"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["priority"].isNull())
        {
            priority_=std::make_shared<int32_t>((int32_t)pJson["priority"].asInt64());
        }
    }
    if(pJson.isMember("crt_retry_num"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["crt_retry_num"].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>((int32_t)pJson["crt_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_num"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson["max_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_interval"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["max_retry_interval"].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>((int32_t)pJson["max_retry_interval"].asInt64());
        }
    }
    if(pJson.isMember("schedule_log"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["schedule_log"].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(pJson["schedule_log"].asString());
        }
    }
    if(pJson.isMember("task_context"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["task_context"].isNull())
        {
            taskContext_=std::make_shared<std::string>(pJson["task_context"].asString());
        }
    }
    if(pJson.isMember("order_time"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["order_time"].isNull())
        {
            orderTime_=std::make_shared<int32_t>((int32_t)pJson["order_time"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("modify_time"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["modify_time"].isNull())
        {
            auto timeStr = pJson["modify_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TLarkTask1::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            taskStage_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            priority_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            taskContext_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            orderTime_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TLarkTask1::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
    if(pJson.isMember("task_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson["task_id"].asString());
        }
    }
    if(pJson.isMember("task_type"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["task_type"].isNull())
        {
            taskType_=std::make_shared<std::string>(pJson["task_type"].asString());
        }
    }
    if(pJson.isMember("task_stage"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["task_stage"].isNull())
        {
            taskStage_=std::make_shared<std::string>(pJson["task_stage"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<uint8_t>((uint8_t)pJson["status"].asUInt64());
        }
    }
    if(pJson.isMember("priority"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["priority"].isNull())
        {
            priority_=std::make_shared<int32_t>((int32_t)pJson["priority"].asInt64());
        }
    }
    if(pJson.isMember("crt_retry_num"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["crt_retry_num"].isNull())
        {
            crtRetryNum_=std::make_shared<int32_t>((int32_t)pJson["crt_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_num"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["max_retry_num"].isNull())
        {
            maxRetryNum_=std::make_shared<int32_t>((int32_t)pJson["max_retry_num"].asInt64());
        }
    }
    if(pJson.isMember("max_retry_interval"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["max_retry_interval"].isNull())
        {
            maxRetryInterval_=std::make_shared<int32_t>((int32_t)pJson["max_retry_interval"].asInt64());
        }
    }
    if(pJson.isMember("schedule_log"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["schedule_log"].isNull())
        {
            scheduleLog_=std::make_shared<std::string>(pJson["schedule_log"].asString());
        }
    }
    if(pJson.isMember("task_context"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["task_context"].isNull())
        {
            taskContext_=std::make_shared<std::string>(pJson["task_context"].asString());
        }
    }
    if(pJson.isMember("order_time"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["order_time"].isNull())
        {
            orderTime_=std::make_shared<int32_t>((int32_t)pJson["order_time"].asInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("modify_time"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["modify_time"].isNull())
        {
            auto timeStr = pJson["modify_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                modifyTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &TLarkTask1::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getId() const noexcept
{
    return id_;
}
void TLarkTask1::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename TLarkTask1::PrimaryKeyType & TLarkTask1::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &TLarkTask1::getValueOfUserId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getUserId() const noexcept
{
    return userId_;
}
void TLarkTask1::setUserId(const std::string &pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(pUserId);
    dirtyFlag_[1] = true;
}
void TLarkTask1::setUserId(std::string &&pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(std::move(pUserId));
    dirtyFlag_[1] = true;
}

const std::string &TLarkTask1::getValueOfTaskId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(taskId_)
        return *taskId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getTaskId() const noexcept
{
    return taskId_;
}
void TLarkTask1::setTaskId(const std::string &pTaskId) noexcept
{
    taskId_ = std::make_shared<std::string>(pTaskId);
    dirtyFlag_[2] = true;
}
void TLarkTask1::setTaskId(std::string &&pTaskId) noexcept
{
    taskId_ = std::make_shared<std::string>(std::move(pTaskId));
    dirtyFlag_[2] = true;
}

const std::string &TLarkTask1::getValueOfTaskType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(taskType_)
        return *taskType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getTaskType() const noexcept
{
    return taskType_;
}
void TLarkTask1::setTaskType(const std::string &pTaskType) noexcept
{
    taskType_ = std::make_shared<std::string>(pTaskType);
    dirtyFlag_[3] = true;
}
void TLarkTask1::setTaskType(std::string &&pTaskType) noexcept
{
    taskType_ = std::make_shared<std::string>(std::move(pTaskType));
    dirtyFlag_[3] = true;
}

const std::string &TLarkTask1::getValueOfTaskStage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(taskStage_)
        return *taskStage_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getTaskStage() const noexcept
{
    return taskStage_;
}
void TLarkTask1::setTaskStage(const std::string &pTaskStage) noexcept
{
    taskStage_ = std::make_shared<std::string>(pTaskStage);
    dirtyFlag_[4] = true;
}
void TLarkTask1::setTaskStage(std::string &&pTaskStage) noexcept
{
    taskStage_ = std::make_shared<std::string>(std::move(pTaskStage));
    dirtyFlag_[4] = true;
}

const uint8_t &TLarkTask1::getValueOfStatus() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &TLarkTask1::getStatus() const noexcept
{
    return status_;
}
void TLarkTask1::setStatus(const uint8_t &pStatus) noexcept
{
    status_ = std::make_shared<uint8_t>(pStatus);
    dirtyFlag_[5] = true;
}

const int32_t &TLarkTask1::getValueOfPriority() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(priority_)
        return *priority_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getPriority() const noexcept
{
    return priority_;
}
void TLarkTask1::setPriority(const int32_t &pPriority) noexcept
{
    priority_ = std::make_shared<int32_t>(pPriority);
    dirtyFlag_[6] = true;
}

const int32_t &TLarkTask1::getValueOfCrtRetryNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(crtRetryNum_)
        return *crtRetryNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getCrtRetryNum() const noexcept
{
    return crtRetryNum_;
}
void TLarkTask1::setCrtRetryNum(const int32_t &pCrtRetryNum) noexcept
{
    crtRetryNum_ = std::make_shared<int32_t>(pCrtRetryNum);
    dirtyFlag_[7] = true;
}

const int32_t &TLarkTask1::getValueOfMaxRetryNum() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(maxRetryNum_)
        return *maxRetryNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getMaxRetryNum() const noexcept
{
    return maxRetryNum_;
}
void TLarkTask1::setMaxRetryNum(const int32_t &pMaxRetryNum) noexcept
{
    maxRetryNum_ = std::make_shared<int32_t>(pMaxRetryNum);
    dirtyFlag_[8] = true;
}

const int32_t &TLarkTask1::getValueOfMaxRetryInterval() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(maxRetryInterval_)
        return *maxRetryInterval_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getMaxRetryInterval() const noexcept
{
    return maxRetryInterval_;
}
void TLarkTask1::setMaxRetryInterval(const int32_t &pMaxRetryInterval) noexcept
{
    maxRetryInterval_ = std::make_shared<int32_t>(pMaxRetryInterval);
    dirtyFlag_[9] = true;
}

const std::string &TLarkTask1::getValueOfScheduleLog() const noexcept
{
    const static std::string defaultValue = std::string();
    if(scheduleLog_)
        return *scheduleLog_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getScheduleLog() const noexcept
{
    return scheduleLog_;
}
void TLarkTask1::setScheduleLog(const std::string &pScheduleLog) noexcept
{
    scheduleLog_ = std::make_shared<std::string>(pScheduleLog);
    dirtyFlag_[10] = true;
}
void TLarkTask1::setScheduleLog(std::string &&pScheduleLog) noexcept
{
    scheduleLog_ = std::make_shared<std::string>(std::move(pScheduleLog));
    dirtyFlag_[10] = true;
}

const std::string &TLarkTask1::getValueOfTaskContext() const noexcept
{
    const static std::string defaultValue = std::string();
    if(taskContext_)
        return *taskContext_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TLarkTask1::getTaskContext() const noexcept
{
    return taskContext_;
}
void TLarkTask1::setTaskContext(const std::string &pTaskContext) noexcept
{
    taskContext_ = std::make_shared<std::string>(pTaskContext);
    dirtyFlag_[11] = true;
}
void TLarkTask1::setTaskContext(std::string &&pTaskContext) noexcept
{
    taskContext_ = std::make_shared<std::string>(std::move(pTaskContext));
    dirtyFlag_[11] = true;
}

const int32_t &TLarkTask1::getValueOfOrderTime() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(orderTime_)
        return *orderTime_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TLarkTask1::getOrderTime() const noexcept
{
    return orderTime_;
}
void TLarkTask1::setOrderTime(const int32_t &pOrderTime) noexcept
{
    orderTime_ = std::make_shared<int32_t>(pOrderTime);
    dirtyFlag_[12] = true;
}

const ::trantor::Date &TLarkTask1::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TLarkTask1::getCreateTime() const noexcept
{
    return createTime_;
}
void TLarkTask1::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[13] = true;
}

const ::trantor::Date &TLarkTask1::getValueOfModifyTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(modifyTime_)
        return *modifyTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TLarkTask1::getModifyTime() const noexcept
{
    return modifyTime_;
}
void TLarkTask1::setModifyTime(const ::trantor::Date &pModifyTime) noexcept
{
    modifyTime_ = std::make_shared<::trantor::Date>(pModifyTime);
    dirtyFlag_[14] = true;
}

void TLarkTask1::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &TLarkTask1::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "task_id",
        "task_type",
        "task_stage",
        "status",
        "priority",
        "crt_retry_num",
        "max_retry_num",
        "max_retry_interval",
        "schedule_log",
        "task_context",
        "order_time",
        "create_time",
        "modify_time"
    };
    return inCols;
}

void TLarkTask1::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTaskId())
        {
            binder << getValueOfTaskId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTaskType())
        {
            binder << getValueOfTaskType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTaskStage())
        {
            binder << getValueOfTaskStage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPriority())
        {
            binder << getValueOfPriority();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCrtRetryNum())
        {
            binder << getValueOfCrtRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMaxRetryNum())
        {
            binder << getValueOfMaxRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMaxRetryInterval())
        {
            binder << getValueOfMaxRetryInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getScheduleLog())
        {
            binder << getValueOfScheduleLog();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getTaskContext())
        {
            binder << getValueOfTaskContext();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOrderTime())
        {
            binder << getValueOfOrderTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getModifyTime())
        {
            binder << getValueOfModifyTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TLarkTask1::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void TLarkTask1::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTaskId())
        {
            binder << getValueOfTaskId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTaskType())
        {
            binder << getValueOfTaskType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTaskStage())
        {
            binder << getValueOfTaskStage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPriority())
        {
            binder << getValueOfPriority();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCrtRetryNum())
        {
            binder << getValueOfCrtRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMaxRetryNum())
        {
            binder << getValueOfMaxRetryNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMaxRetryInterval())
        {
            binder << getValueOfMaxRetryInterval();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getScheduleLog())
        {
            binder << getValueOfScheduleLog();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getTaskContext())
        {
            binder << getValueOfTaskContext();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOrderTime())
        {
            binder << getValueOfOrderTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getModifyTime())
        {
            binder << getValueOfModifyTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TLarkTask1::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTaskId())
    {
        ret["task_id"]=getValueOfTaskId();
    }
    else
    {
        ret["task_id"]=Json::Value();
    }
    if(getTaskType())
    {
        ret["task_type"]=getValueOfTaskType();
    }
    else
    {
        ret["task_type"]=Json::Value();
    }
    if(getTaskStage())
    {
        ret["task_stage"]=getValueOfTaskStage();
    }
    else
    {
        ret["task_stage"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getPriority())
    {
        ret["priority"]=getValueOfPriority();
    }
    else
    {
        ret["priority"]=Json::Value();
    }
    if(getCrtRetryNum())
    {
        ret["crt_retry_num"]=getValueOfCrtRetryNum();
    }
    else
    {
        ret["crt_retry_num"]=Json::Value();
    }
    if(getMaxRetryNum())
    {
        ret["max_retry_num"]=getValueOfMaxRetryNum();
    }
    else
    {
        ret["max_retry_num"]=Json::Value();
    }
    if(getMaxRetryInterval())
    {
        ret["max_retry_interval"]=getValueOfMaxRetryInterval();
    }
    else
    {
        ret["max_retry_interval"]=Json::Value();
    }
    if(getScheduleLog())
    {
        ret["schedule_log"]=getValueOfScheduleLog();
    }
    else
    {
        ret["schedule_log"]=Json::Value();
    }
    if(getTaskContext())
    {
        ret["task_context"]=getValueOfTaskContext();
    }
    else
    {
        ret["task_context"]=Json::Value();
    }
    if(getOrderTime())
    {
        ret["order_time"]=getValueOfOrderTime();
    }
    else
    {
        ret["order_time"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getModifyTime())
    {
        ret["modify_time"]=getModifyTime()->toDbStringLocal();
    }
    else
    {
        ret["modify_time"]=Json::Value();
    }
    return ret;
}

Json::Value TLarkTask1::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTaskId())
            {
                ret[pMasqueradingVector[2]]=getValueOfTaskId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTaskType())
            {
                ret[pMasqueradingVector[3]]=getValueOfTaskType();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTaskStage())
            {
                ret[pMasqueradingVector[4]]=getValueOfTaskStage();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[5]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPriority())
            {
                ret[pMasqueradingVector[6]]=getValueOfPriority();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCrtRetryNum())
            {
                ret[pMasqueradingVector[7]]=getValueOfCrtRetryNum();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMaxRetryNum())
            {
                ret[pMasqueradingVector[8]]=getValueOfMaxRetryNum();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getMaxRetryInterval())
            {
                ret[pMasqueradingVector[9]]=getValueOfMaxRetryInterval();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getScheduleLog())
            {
                ret[pMasqueradingVector[10]]=getValueOfScheduleLog();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getTaskContext())
            {
                ret[pMasqueradingVector[11]]=getValueOfTaskContext();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getOrderTime())
            {
                ret[pMasqueradingVector[12]]=getValueOfOrderTime();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[13]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getModifyTime())
            {
                ret[pMasqueradingVector[14]]=getModifyTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getTaskId())
    {
        ret["task_id"]=getValueOfTaskId();
    }
    else
    {
        ret["task_id"]=Json::Value();
    }
    if(getTaskType())
    {
        ret["task_type"]=getValueOfTaskType();
    }
    else
    {
        ret["task_type"]=Json::Value();
    }
    if(getTaskStage())
    {
        ret["task_stage"]=getValueOfTaskStage();
    }
    else
    {
        ret["task_stage"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getPriority())
    {
        ret["priority"]=getValueOfPriority();
    }
    else
    {
        ret["priority"]=Json::Value();
    }
    if(getCrtRetryNum())
    {
        ret["crt_retry_num"]=getValueOfCrtRetryNum();
    }
    else
    {
        ret["crt_retry_num"]=Json::Value();
    }
    if(getMaxRetryNum())
    {
        ret["max_retry_num"]=getValueOfMaxRetryNum();
    }
    else
    {
        ret["max_retry_num"]=Json::Value();
    }
    if(getMaxRetryInterval())
    {
        ret["max_retry_interval"]=getValueOfMaxRetryInterval();
    }
    else
    {
        ret["max_retry_interval"]=Json::Value();
    }
    if(getScheduleLog())
    {
        ret["schedule_log"]=getValueOfScheduleLog();
    }
    else
    {
        ret["schedule_log"]=Json::Value();
    }
    if(getTaskContext())
    {
        ret["task_context"]=getValueOfTaskContext();
    }
    else
    {
        ret["task_context"]=Json::Value();
    }
    if(getOrderTime())
    {
        ret["order_time"]=getValueOfOrderTime();
    }
    else
    {
        ret["order_time"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getModifyTime())
    {
        ret["modify_time"]=getModifyTime()->toDbStringLocal();
    }
    else
    {
        ret["modify_time"]=Json::Value();
    }
    return ret;
}

bool TLarkTask1::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("task_id"))
    {
        if(!validJsonOfField(2, "task_id", pJson["task_id"], err, true))
            return false;
    }
    else
    {
        err="The task_id column cannot be null";
        return false;
    }
    if(pJson.isMember("task_type"))
    {
        if(!validJsonOfField(3, "task_type", pJson["task_type"], err, true))
            return false;
    }
    else
    {
        err="The task_type column cannot be null";
        return false;
    }
    if(pJson.isMember("task_stage"))
    {
        if(!validJsonOfField(4, "task_stage", pJson["task_stage"], err, true))
            return false;
    }
    else
    {
        err="The task_stage column cannot be null";
        return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(5, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("priority"))
    {
        if(!validJsonOfField(6, "priority", pJson["priority"], err, true))
            return false;
    }
    if(pJson.isMember("crt_retry_num"))
    {
        if(!validJsonOfField(7, "crt_retry_num", pJson["crt_retry_num"], err, true))
            return false;
    }
    if(pJson.isMember("max_retry_num"))
    {
        if(!validJsonOfField(8, "max_retry_num", pJson["max_retry_num"], err, true))
            return false;
    }
    if(pJson.isMember("max_retry_interval"))
    {
        if(!validJsonOfField(9, "max_retry_interval", pJson["max_retry_interval"], err, true))
            return false;
    }
    if(pJson.isMember("schedule_log"))
    {
        if(!validJsonOfField(10, "schedule_log", pJson["schedule_log"], err, true))
            return false;
    }
    else
    {
        err="The schedule_log column cannot be null";
        return false;
    }
    if(pJson.isMember("task_context"))
    {
        if(!validJsonOfField(11, "task_context", pJson["task_context"], err, true))
            return false;
    }
    else
    {
        err="The task_context column cannot be null";
        return false;
    }
    if(pJson.isMember("order_time"))
    {
        if(!validJsonOfField(12, "order_time", pJson["order_time"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("modify_time"))
    {
        if(!validJsonOfField(14, "modify_time", pJson["modify_time"], err, true))
            return false;
    }
    return true;
}
bool TLarkTask1::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TLarkTask1::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("task_id"))
    {
        if(!validJsonOfField(2, "task_id", pJson["task_id"], err, false))
            return false;
    }
    if(pJson.isMember("task_type"))
    {
        if(!validJsonOfField(3, "task_type", pJson["task_type"], err, false))
            return false;
    }
    if(pJson.isMember("task_stage"))
    {
        if(!validJsonOfField(4, "task_stage", pJson["task_stage"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(5, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("priority"))
    {
        if(!validJsonOfField(6, "priority", pJson["priority"], err, false))
            return false;
    }
    if(pJson.isMember("crt_retry_num"))
    {
        if(!validJsonOfField(7, "crt_retry_num", pJson["crt_retry_num"], err, false))
            return false;
    }
    if(pJson.isMember("max_retry_num"))
    {
        if(!validJsonOfField(8, "max_retry_num", pJson["max_retry_num"], err, false))
            return false;
    }
    if(pJson.isMember("max_retry_interval"))
    {
        if(!validJsonOfField(9, "max_retry_interval", pJson["max_retry_interval"], err, false))
            return false;
    }
    if(pJson.isMember("schedule_log"))
    {
        if(!validJsonOfField(10, "schedule_log", pJson["schedule_log"], err, false))
            return false;
    }
    if(pJson.isMember("task_context"))
    {
        if(!validJsonOfField(11, "task_context", pJson["task_context"], err, false))
            return false;
    }
    if(pJson.isMember("order_time"))
    {
        if(!validJsonOfField(12, "order_time", pJson["order_time"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("modify_time"))
    {
        if(!validJsonOfField(14, "modify_time", pJson["modify_time"], err, false))
            return false;
    }
    return true;
}
bool TLarkTask1::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TLarkTask1::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 256)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 256)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4096)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4096)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 8192)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 8192)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
